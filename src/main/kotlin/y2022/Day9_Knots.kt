package y2022

import kotlin.math.abs

fun main(args: Array<String>) {

    val testInput = Day9(testInput)
    testInput.part1()
        .also { println("Part1 test $it") }
        .also { check(it == "13") }

    val testInput2 = Day9(testInput2)
    testInput2.part2()
        .also { println("Part2 test $it") }
        .also { check(it == "36") }

    val realInput = Day9(input)
    realInput.part1()
        .also { println("Part1 real $it") }
        .also { check(it == "6367") }
    realInput.part2()
        .also { println("Part2 real $it") }
        .also { check(it == "2536") }
}

class Day9(private val input: String) {

    data class Vector(val x: Int, val y: Int)

    data class Knot(val name: String, var x: Int, var y: Int) {
        fun applyVector(vector: Vector) {
            this.x += vector.x
            this.y += vector.y
        }

        fun catchUp(head: Knot, direction: Vector) {
            val distanceX = abs(x - head.x)
            val distanceY = abs(y - head.y)
            val distance = distanceX + distanceY
            if (distanceX >= 3) {
                error("what happened here?!")
            }
            if (distanceX > 1 || distance > 2) {
                if (head.x > x) {
                    x += 1
                } else {
                    x -= 1
                }
            }
            if (distanceY > 1 || distance > 2) {
                if (head.y > y) {
                    y += 1
                } else {
                    y -= 1
                }
            }
        }
    }


    fun part1(): String {

        val head = Knot("head", 0, 0)
        val tail = Knot("tail", 0, 0)
        val tailPositions = mutableSetOf<Pair<Int, Int>>()

        input.lines().map { it.split(" ") }.map {
            when (it.first()) {
                "R" -> Vector(1, 0)
                "U" -> Vector(0, 1)
                "L" -> Vector(-1, 0)
                "D" -> Vector(0, -1)
                else -> error("Invalid direction")
            } to it.last().toInt()
        }.forEach { (direction, quantity) ->
            (1..quantity).forEach {
                head.applyVector(direction)
                tail.catchUp(head, direction)
                tailPositions.add(tail.x to tail.y)
            }
        }
        return tailPositions.size.toString()
    }

    fun part2(): String {

        var name = 0
        val knots = List(10) { Knot((name++).toString(), 10, 10) }
        val tailPositions = mutableSetOf<Pair<Int, Int>>()

        input.lines().map { it.split(" ") }.map {
            when (it.first()) {
                "R" -> Vector(1, 0)
                "U" -> Vector(0, 1)
                "L" -> Vector(-1, 0)
                "D" -> Vector(0, -1)
                else -> error("Invalid direction")
            } to it.last().toInt()
        }.forEach { (direction, quantity) ->

            (1..quantity).forEach {

                knots.forEachIndexed { index, knot ->
                    if (index == 0) {
                        knot.applyVector(direction)
                    } else {
                        knot.catchUp(knots[index - 1], direction)
                    }
                }
                tailPositions.add(knots.last().x to knots.last().y)



            }
//            (-5..23).forEach { y ->
//                (-5..23).forEach { x ->
//                    var letter = "."
//
//                    knots.reversed().forEachIndexed { index, knot ->
//                        if (knot.x == x && knot.y == y) {
//                            val letterToPrint = knots.size - index
//                            letter = if (letterToPrint == 1) {
//                                "H"
//                            } else {
//                                (letterToPrint - 1).toString()
//                            }
//
//                        }
//                    }
//                    print(letter)
//                }
//                println()
//            }

        }
//        (-5..23).forEach { y ->
//            (-5..23).forEach { x ->
//                var letter = "."
//                print(
//                    if (tailPositions.filter { it.first == x && it.second == y }.any()) {
//                        "#"
//                    } else { "."
//                    }
//                )
//                print(letter)
//            }
//            println()
//        }
//        tailPositions.toList().alsoPrintOnLines()
        return tailPositions.size.toString()
    }
}


private val testInput =
    """
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
""".trimIndent()
private val testInput2 =
    """
R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20
""".trimIndent()
private val testInput3 =
    """
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
""".trimIndent()
private val input =
    """
U 1
R 2
D 2
U 2
L 1
U 1
R 1
U 2
R 1
D 1
U 2
L 1
R 1
U 1
L 1
D 1
L 1
D 1
U 2
R 2
U 1
L 1
R 2
U 2
L 2
U 2
R 2
D 2
R 1
U 2
L 2
U 1
R 1
L 2
U 2
R 2
L 1
R 2
L 1
D 1
R 2
L 2
D 2
L 1
D 1
L 2
U 1
R 2
L 2
U 2
D 2
R 2
D 2
L 2
D 2
L 1
D 2
L 1
R 2
L 2
R 1
D 2
U 1
R 2
L 1
R 2
D 1
U 1
R 1
U 2
D 2
R 1
D 1
U 1
L 2
D 2
U 1
R 2
L 2
R 1
D 2
L 1
U 1
D 1
U 2
D 1
U 1
D 2
R 2
L 1
D 1
U 1
R 1
L 2
D 1
L 2
R 1
L 2
U 2
R 1
L 2
D 2
L 2
U 2
L 1
U 2
R 2
L 2
R 2
L 2
U 1
L 1
U 1
D 1
U 3
R 2
L 3
R 2
D 2
U 3
R 1
L 3
D 1
U 3
R 2
D 1
U 3
R 2
L 3
R 3
L 2
R 1
U 2
R 2
U 3
D 1
U 3
L 2
D 1
R 2
U 3
R 3
L 3
D 3
R 3
U 3
L 3
U 1
L 2
U 3
L 1
U 1
D 3
R 3
U 1
R 1
U 1
L 3
R 2
U 2
L 3
D 1
L 2
D 2
L 2
R 2
U 3
D 3
R 2
U 3
L 2
U 1
D 2
R 3
L 1
U 1
R 2
D 3
L 1
R 1
U 1
D 3
R 2
D 3
R 2
U 1
L 2
U 1
R 2
U 1
R 2
L 2
U 2
R 3
L 3
D 2
L 1
R 3
D 1
U 1
L 2
R 1
D 3
U 3
D 3
U 1
R 2
L 3
R 1
L 3
R 2
D 2
U 1
D 1
L 3
R 1
L 3
R 3
L 1
D 2
L 3
U 2
D 1
L 1
U 2
R 3
L 2
R 3
U 3
L 2
D 4
U 4
R 3
U 2
L 1
U 3
D 4
L 2
U 3
L 4
D 4
R 3
D 3
R 1
D 2
L 1
R 2
D 3
L 1
R 2
U 3
D 4
R 4
L 2
R 4
U 3
R 4
U 4
L 4
D 3
R 4
D 1
U 3
L 3
R 1
U 2
R 3
U 4
D 2
U 3
D 2
L 2
D 3
L 4
R 2
U 2
L 2
U 4
D 2
U 4
L 4
U 2
R 3
D 4
U 4
L 3
D 3
R 4
L 3
R 2
L 4
U 3
D 2
L 4
R 1
U 2
L 3
D 1
R 2
U 2
D 4
R 1
U 1
R 2
D 2
L 3
R 1
U 2
R 1
D 4
U 1
R 1
U 3
D 1
U 2
D 3
U 3
L 2
U 4
R 1
L 2
D 2
L 2
D 3
U 3
L 3
U 1
D 1
R 1
D 2
L 2
U 2
D 3
R 1
L 4
U 3
L 5
R 5
L 4
D 4
R 4
L 4
R 4
L 2
R 3
D 3
R 2
L 4
R 2
U 5
D 5
U 1
R 4
U 2
R 3
L 4
D 2
U 3
D 4
U 2
D 5
L 5
R 2
U 3
R 1
D 1
R 4
U 5
R 3
L 3
U 3
L 1
U 5
D 2
U 3
R 1
D 5
L 4
U 3
D 1
L 3
R 2
U 1
L 2
R 2
D 4
R 2
L 3
U 2
D 1
L 1
R 4
L 1
D 2
R 1
L 5
R 4
U 2
R 2
U 1
D 3
R 3
L 1
U 5
R 2
D 3
U 3
R 1
U 4
R 1
D 2
L 1
D 4
L 1
R 5
L 5
R 5
L 1
U 5
R 2
U 5
L 2
D 3
U 5
L 4
D 5
U 2
R 2
D 2
R 4
L 4
D 5
R 2
L 2
R 5
U 2
L 1
U 2
D 2
R 5
U 1
L 5
R 1
L 4
D 4
L 3
D 4
U 2
L 2
D 5
U 4
R 3
L 6
D 3
R 2
U 2
L 2
U 1
R 6
U 5
R 2
U 2
R 1
U 5
L 3
U 2
R 5
L 3
U 3
D 2
U 5
L 5
U 4
R 6
D 2
L 6
U 1
L 5
D 4
U 3
D 3
U 5
L 6
U 4
D 3
U 4
D 6
R 1
U 4
L 1
D 4
U 5
R 2
L 3
R 2
U 2
D 1
L 3
R 6
L 2
U 5
L 3
D 1
L 2
D 4
U 4
L 4
D 1
L 2
D 2
R 5
L 2
R 2
L 3
R 2
U 2
L 1
U 4
D 4
R 5
L 3
U 2
D 3
R 6
D 3
R 3
L 4
U 5
D 3
R 5
U 4
R 2
U 4
L 1
U 6
D 6
L 1
R 2
U 6
D 5
L 1
U 3
L 1
D 6
L 3
U 4
D 6
U 4
D 3
L 3
U 5
R 2
L 5
D 3
R 2
D 2
U 1
D 2
R 2
U 5
R 4
U 1
R 5
D 2
R 2
U 5
L 6
U 3
L 7
D 1
R 4
D 4
R 7
L 7
U 7
D 4
L 4
R 6
U 6
L 7
R 3
L 6
U 6
R 5
D 4
L 6
U 1
R 6
D 3
U 5
D 3
U 2
R 7
U 5
D 5
L 2
D 2
U 4
L 3
D 1
L 1
R 2
L 2
R 6
D 4
L 7
D 7
R 4
L 6
R 3
L 3
U 7
R 3
L 5
D 6
R 3
U 5
D 3
L 4
U 7
R 6
D 6
U 5
R 3
L 3
R 6
L 3
D 1
L 3
U 5
D 2
L 3
R 4
L 7
R 5
U 3
L 7
D 5
U 6
D 5
L 6
R 6
L 1
R 3
D 4
L 5
R 2
U 4
R 2
D 4
R 3
D 2
L 3
R 2
L 4
R 5
U 7
L 7
D 3
R 5
L 1
U 4
R 5
U 4
R 6
L 1
R 4
D 8
L 2
U 7
L 3
R 3
U 1
D 8
U 5
D 3
R 3
L 2
U 2
D 8
R 3
U 4
L 6
D 7
R 7
U 6
L 7
U 5
R 1
L 2
U 4
D 1
L 6
D 5
R 7
U 7
R 8
L 7
U 7
D 3
L 3
D 4
L 1
R 6
D 5
U 1
D 8
R 1
L 2
U 1
D 2
L 3
R 7
L 2
D 8
R 5
U 6
D 4
L 1
U 6
R 1
D 4
R 4
L 2
D 4
R 1
U 2
R 8
L 6
R 8
U 8
L 3
R 6
D 3
R 2
L 3
U 6
D 6
U 4
R 7
L 3
R 2
L 4
U 3
R 7
D 8
R 1
D 6
U 7
R 2
U 2
L 6
U 5
R 1
D 1
R 6
L 2
U 3
D 2
L 2
D 5
R 4
L 1
D 7
R 6
D 4
U 2
D 5
U 3
D 8
U 6
R 5
L 6
U 7
L 3
R 8
U 3
L 2
R 3
L 5
R 3
L 2
U 9
D 2
U 5
R 7
U 9
L 9
R 6
L 7
D 1
L 4
D 3
R 7
L 6
R 9
D 6
R 4
D 8
L 1
U 5
R 9
D 9
U 6
L 5
R 4
D 2
R 5
D 1
R 6
D 3
R 8
L 1
U 2
R 5
U 3
L 1
R 8
D 6
L 5
D 7
R 3
U 2
L 7
U 3
D 4
L 2
R 8
D 6
L 3
U 5
L 1
U 5
L 4
R 7
U 6
R 1
D 3
U 3
D 2
R 4
L 5
U 2
R 6
L 8
U 6
L 9
D 3
R 3
U 9
D 8
L 2
R 7
D 6
R 1
D 8
U 8
D 2
U 4
D 8
L 9
R 8
D 8
R 7
U 8
L 8
U 8
R 7
L 8
U 3
D 6
R 7
D 2
L 5
U 8
D 7
U 6
R 3
D 7
U 9
L 7
R 3
L 1
U 9
L 7
U 2
D 7
L 5
R 9
D 2
R 7
U 6
D 7
U 3
R 8
U 9
L 8
R 8
D 10
L 7
R 3
U 5
R 5
D 9
U 10
L 2
D 4
L 2
U 1
D 3
L 3
U 7
D 6
L 6
D 7
L 8
U 1
D 9
L 7
U 4
L 3
U 6
D 2
L 5
U 10
D 9
U 8
D 1
R 10
U 4
L 1
R 7
U 2
L 5
D 5
R 7
D 1
R 4
U 2
D 6
L 7
U 10
R 3
L 9
D 7
L 2
R 5
U 10
D 10
R 9
D 5
U 3
L 7
D 5
U 6
D 7
L 6
D 10
R 7
U 8
L 4
D 9
L 4
U 5
R 9
U 9
R 3
U 2
R 2
D 1
R 1
U 6
R 8
D 10
U 2
D 9
L 8
R 1
D 1
L 9
R 8
D 9
R 5
L 9
U 10
D 4
R 7
U 4
L 3
U 8
L 2
U 9
D 9
L 1
R 4
U 2
L 4
U 3
D 7
U 11
R 6
U 9
D 6
R 7
L 1
D 7
R 2
D 6
U 2
L 2
U 4
R 6
U 6
L 11
D 7
R 9
L 2
D 10
L 10
U 4
L 6
D 11
U 9
L 1
R 10
L 7
R 4
D 5
L 3
U 2
R 9
L 9
D 1
L 11
D 5
U 6
D 5
U 9
R 1
L 7
U 3
R 7
L 2
D 6
R 3
U 2
D 5
R 9
L 3
D 11
U 9
D 11
R 2
D 7
R 9
U 4
D 6
U 7
R 10
D 3
L 4
R 9
D 3
L 7
R 7
L 11
D 6
R 9
D 9
R 3
U 3
R 3
L 6
D 11
R 2
L 10
U 2
R 2
D 11
R 7
D 8
R 2
D 10
U 5
D 3
L 10
R 1
D 5
R 4
L 10
U 5
D 9
U 2
L 3
U 3
R 5
D 4
L 1
D 1
R 10
L 4
D 8
L 5
D 5
L 3
D 5
L 3
R 1
L 3
R 4
U 9
R 4
D 12
L 5
R 4
L 11
D 10
U 3
R 2
U 5
L 6
D 5
U 5
D 10
R 12
L 2
R 10
D 11
R 12
U 5
R 4
L 4
U 2
R 12
L 6
D 3
R 2
D 1
U 9
L 6
U 6
L 10
D 8
R 9
L 1
U 1
D 5
U 4
R 10
U 5
R 10
D 12
U 6
D 9
U 3
L 8
R 8
D 7
L 6
U 7
R 1
U 6
D 9
R 2
U 11
D 7
L 12
D 6
L 5
U 8
R 8
L 8
D 3
R 7
L 11
D 1
L 5
D 5
U 8
D 2
R 8
L 6
D 7
L 3
D 3
U 9
L 1
U 8
D 7
L 8
U 4
R 12
U 7
L 10
D 4
U 7
D 7
U 5
L 4
R 9
D 5
R 4
U 2
R 1
D 9
U 7
R 9
U 12
D 4
R 8
U 4
D 10
L 10
D 11
L 8
R 11
U 5
D 4
L 3
D 1
U 7
L 5
R 13
L 2
R 9
L 6
R 6
L 2
U 10
D 11
U 13
R 11
U 6
L 7
D 11
R 7
U 4
L 1
D 9
R 7
L 11
U 13
L 8
R 12
U 5
R 9
U 11
R 3
D 11
U 9
L 8
U 6
D 6
L 11
U 4
D 3
U 11
D 1
L 6
U 5
R 10
L 10
R 8
L 12
R 4
U 3
R 8
L 8
U 4
L 10
U 9
R 8
U 3
D 2
U 4
D 10
L 6
R 10
U 8
L 9
R 13
D 8
U 10
D 10
L 13
U 1
R 4
U 11
D 12
L 1
R 2
U 12
D 7
U 9
R 13
U 5
D 6
R 4
L 6
U 9
L 5
U 8
D 4
L 5
U 6
L 8
U 1
R 3
U 8
R 2
D 5
U 12
D 9
L 2
U 3
R 11
U 9
R 7
D 10
U 2
L 3
D 3
U 9
D 6
U 1
R 9
L 5
R 2
L 2
R 11
D 7
L 10
U 13
L 6
R 11
U 6
D 11
U 4
R 10
D 5
R 4
L 6
U 3
L 8
D 6
U 14
R 3
U 1
L 6
R 7
U 9
L 9
D 10
U 10
D 12
R 9
D 12
R 4
D 12
U 9
R 9
U 2
L 11
D 13
U 12
L 7
D 14
R 4
D 14
U 11
D 5
R 10
L 2
D 11
L 3
U 9
R 4
L 8
U 8
R 7
U 7
D 5
R 8
U 5
L 3
R 7
D 6
R 12
U 3
D 8
L 8
U 3
L 8
R 7
L 13
U 2
L 8
U 14
R 5
L 1
D 14
R 10
U 14
R 6
U 14
D 5
U 13
D 1
U 12
R 7
L 2
U 4
R 10
U 8
R 12
L 2
U 7
D 9
L 6
D 3
U 7
L 11
U 8
R 7
D 5
U 5
R 13
D 9
R 14
U 8
R 14
D 8
U 1
L 13
R 12
D 7
L 6
R 3
D 10
R 10
L 6
D 12
L 5
U 14
D 1
U 8
R 5
D 15
R 11
D 10
L 11
D 13
L 5
D 3
U 15
R 6
L 12
R 12
L 15
U 5
D 8
R 13
D 10
R 4
L 6
U 8
R 6
D 15
U 6
L 13
D 15
U 11
D 6
U 7
L 1
R 5
L 1
U 7
D 15
L 1
D 7
U 6
R 14
D 4
R 5
U 4
D 5
R 13
D 5
L 1
D 11
L 3
D 3
R 13
L 15
D 4
R 4
U 5
L 10
U 14
D 2
R 9
U 8
R 1
U 13
L 5
U 12
R 10
U 8
L 9
D 7
R 10
L 8
R 13
D 12
L 2
R 4
D 14
R 14
D 2
U 4
D 14
U 1
L 3
R 7
L 2
D 10
R 10
L 1
R 5
D 6
L 5
R 11
U 15
L 6
D 4
R 14
D 6
R 1
L 12
R 15
L 10
U 1
D 3
R 2
D 2
L 8
U 9
D 14
L 4
R 2
U 14
L 11
D 12
U 5
L 11
R 5
U 14
R 9
U 12
L 12
D 9
R 10
D 4
L 3
U 4
R 2
D 9
U 5
L 13
U 5
R 15
L 4
R 10
U 8
R 3
U 13
D 4
U 4
L 8
U 1
D 13
R 10
U 13
L 5
U 7
D 2
U 15
R 10
U 12
D 9
R 12
L 3
D 7
R 7
L 3
R 14
L 9
D 4
R 8
D 1
R 1
U 1
R 14
L 7
R 10
D 14
L 1
U 12
D 8
U 1
R 13
U 12
D 4
U 8
L 8
D 8
L 4
R 2
D 6
R 2
L 3
D 16
R 6
L 16
D 16
L 2
R 16
D 15
L 1
D 4
U 3
L 5
U 4
L 4
D 9
L 2
R 8
D 7
U 7
R 12
U 12
R 3
D 8
L 12
D 12
R 13
U 8
R 5
U 2
D 3
U 11
L 13
R 4
L 5
R 9
D 9
U 14
R 15
L 16
R 13
D 11
U 13
L 10
D 11
L 10
R 4
U 7
D 17
U 7
R 10
U 11
L 2
D 8
U 3
R 14
U 13
D 8
U 6
L 2
D 9
L 1
D 4
U 16
D 4
L 13
U 1
D 13
U 12
R 17
L 6
R 17
L 17
R 13
L 9
U 12
L 15
R 17
U 3
R 2
L 12
U 7
L 12
U 9
L 15
R 9
U 3
L 13
R 8
L 3
R 2
L 17
U 14
D 16
L 13
D 2
U 17
D 6
U 8
L 5
D 10
L 3
D 3
R 7
L 16
R 8
U 13
L 17
U 16
L 9
U 8
D 12
R 10
U 11
D 10
L 17
R 3
D 7
U 13
D 11
R 7
D 16
U 4
R 12
D 12
U 11
D 2
L 9
D 6
L 4
R 5
L 13
U 7
L 12
D 1
L 15
U 8
R 4
U 15
R 15
D 7
R 8
U 9
R 5
D 12
R 12
U 2
D 13
U 2
L 6
D 8
U 12
R 6
D 16
U 4
R 9
L 6
U 18
L 7
R 15
U 8
D 18
L 11
R 16
D 2
R 7
D 8
L 10
U 15
L 13
D 7
R 13
D 14
R 2
L 14
D 4
L 10
R 13
L 18
U 15
L 17
R 18
D 2
U 7
R 18
D 4
L 1
U 12
L 1
U 16
D 6
R 7
U 9
L 1
U 13
R 2
L 8
D 5
R 18
D 16
R 8
D 2
R 13
L 16
R 18
L 10
D 6
U 4
D 15
U 3
D 9
R 17
D 8
L 4
R 17
D 15
R 1
D 18
U 1
R 5
L 7
D 18
U 16
D 2
L 11
R 7
L 12
D 2
U 8
L 17
U 18
L 10
R 16
L 5
R 1
L 10
R 14
L 4
D 15
R 8
D 15
L 12
D 5
U 11
L 1
R 8
D 11
U 5
L 12
D 11
U 9
D 12
R 7
D 11
U 2
R 15
L 2
R 8
U 2
D 8
R 14
L 4
D 1
U 4
R 4
D 2
R 5
D 9
L 10
U 8
R 13
D 15
R 18
D 5
U 5
L 1
U 1
R 9
D 2
U 6
R 5
U 5
R 17
L 2
D 1
R 3
D 5
U 13
R 10
D 10
R 13
D 5
L 1
U 14
D 17
U 15
R 16
L 9
U 12
L 17
R 19
U 1
D 4
U 14
L 7
R 16
L 5
D 4
L 14
U 13
R 10
L 19
D 1
R 17
D 6
L 19
U 11
L 14
U 15
D 10
U 17
R 16
U 12
L 13
D 1
R 11
D 10
L 4
D 15
L 18
R 2
U 5
L 2
U 9
D 16
R 8
D 13
R 19
U 14
L 10
R 13
U 3
R 2
U 11
L 2
R 2
U 12
L 14
U 15
R 6
D 10
R 8
U 14
D 9
L 2
U 3
D 8
U 7
R 10
U 16
R 3
U 9
L 16
D 1
R 1
U 12
R 12
U 8
L 19
U 14
R 9
U 5
L 15
U 7
L 17
U 16
R 19
U 17
L 1
D 7
""".trimIndent()


/**

 */