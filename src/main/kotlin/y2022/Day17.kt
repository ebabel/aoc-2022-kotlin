package y2022

import kotlin.time.ExperimentalTime
import kotlin.time.measureTime

@OptIn(ExperimentalTime::class)
fun main(args: Array<String>) {
    measureTime {
        val testInput = Day17(testInput)
//        testInput.part1()
//            .also { println("Part1 test $it") }
//            .also { check(it == "3068") {"should be 3068"} }
//        testInput.part2()
//            .also { println("Part2 test $it") }
//            .also { check(it == "result") }
//
        val realInput = Day17(input)
//        realInput.part(2022L)
//            .also { println("Part1 real $it") }
//            .also { check(it == "3161") }
        realInput.part(1000000000000L)
            .also { println("Part2 real $it") }
            .also { check(it == "result") }
    }.also {
        println("Took ${it.inWholeSeconds} seconds or ${it.inWholeMilliseconds}ms.")
    }
}

class Day17(private val input: String) {

    fun debug(log: String) {
        println(log)
    }
    fun part(rocksToTest: Long): String {

        val rocks = rocks.split("\n\n").map {
            it.lines().map {
                it.map { it == '#' }
            }.reversed()
        }

        fun List<List<Boolean>>.rockWidth() = this.maxOf { it.size }
        fun List<List<Boolean>>.rockHeight() = this.size

        val towerFloors = mutableListOf<MutableList<Boolean>>()

        var workingWind = 0L
        var workingRockShapeIndex = 0L
        var workingRockX = 2
        var workingRockY = 3
        var rockShape = rocks[(workingRockShapeIndex % rocks.size).toInt()]
        fun canGoLeft(): Boolean {
            if (towerFloors.size <= workingRockY) {
                return workingRockX > 0
            } else if (towerFloors.isNotEmpty()) {
                if (workingRockX <= 0) {
                    return false
                }

                // workingRockY - 1
//                val rockShape = rocks[(workingRockShapeIndex % rocks.size).toInt()]
                return rockShape.mapIndexed { indexY, rockShapeLine ->
                    rockShapeLine.mapIndexed { indexX, c ->
//                        debug("checking $indexX $indexY $c ")
                        if (towerFloors.size > workingRockY + indexY) {
//                            debug("${indexX + workingRockX - 1} ${workingRockY + indexY} ${towerFloors[workingRockY + indexY][indexX + workingRockX - 1]}")
//                            debug("${indexX + workingRockX - 1} ${workingRockY + indexY - 1} ${towerFloors[workingRockY + indexY - 1][indexX + workingRockX - 1]}")
//                            debug("${indexX + workingRockX - 1} ${workingRockY+indexY-2} ${towerFloors[workingRockY+indexY+2][indexX+workingRockX-1]}")
                            (c && towerFloors[workingRockY + indexY][indexX + workingRockX - 1])
                        } else {
//                            debug("too high")
                            false
                        }
                    }.any { it }
                }.none { it }

            }
            return false
        }

        fun canGoRight(): Boolean {
//            debug("canGoRight?")
            if (towerFloors.size <= workingRockY) {
                return workingRockX + rockShape.rockWidth() < 7
            } else if (towerFloors.isNotEmpty()) {
                if (workingRockX + rockShape.rockWidth() >= 7) {
                    return false
                }

                return rockShape.mapIndexed { indexY, rockShapeLine ->
//                    debug("rockLine $rockShapeLine")
                    rockShapeLine.mapIndexed { indexX, c ->
//                        debug("checking $indexX $indexY $c $workingRockY")
                        if (towerFloors.size > workingRockY + indexY) {
//                            debug("${indexX + workingRockX - 1} ${workingRockY+indexY-1} ${towerFloors[workingRockY+indexY][indexX+workingRockX+1]}")
                            (c && towerFloors[workingRockY + indexY][indexX + workingRockX + 1])
                        } else {
//                            debug("too high")
                            false
                        }
                    }.any { it }
                }.none { it }

            }
            return false
        }

//        fun canDrop(): Boolean {
//            if (workingRockY > towerFloors.size) {
//                return true
//            }
//            return false
//        }

        fun canDrop(): Boolean {
//            debug("canDrop?")
            if (workingRockY == 0) {
                return false
            } else if (workingRockY > towerFloors.size) {
                return true
            } else if (towerFloors.isNotEmpty()) {
                // workingRockY - 1
//                val rockShape = rocks[workingRockShapeIndex % rocks.size]
//                debug("${towerFloors[workingRockY - 1].subList(workingRockX, workingRockX + rockShape.rockWidth())}")

                rockShape.mapIndexed { indexY, s ->
//                    debug("${towerFloors.size} $workingRockY $indexY")
                    if (towerFloors.size >= workingRockY + indexY) {
//                        debug("canDrop ${rockShape[indexY]}")
                        s.mapIndexed { indexX, c ->
                                (c && towerFloors[workingRockY + indexY - 1][indexX + workingRockX])//.also { debug("canDrop check $it") }
                        }.any { it }//.also { debug("canDrop2 returning $it") }
                        // true if conflict
                    } else {
//                        debug("too high")
                        false
                    }
                }.none { it }.also {
//                    debug("canDrop returning $it")
                    return (it)
                }


            }
            return false
        }

        fun convertToRest() {
            if (workingRockY == towerFloors.size) {
//                debug("converting")

                rockShape
                    .map {
                        val start = (0.until(workingRockX)).map { false }.plus(it)
                        start.plus(start.size.until(7).map { false })
                    }.forEach {
                        towerFloors.add(it.toMutableList())
                    }
            } else {
//                debug("converting yahoos")
                rockShape
                    .map {
                        val start = (0.until(workingRockX)).map { false }.plus(it)
                        start.plus(start.size.until(7).map { false })
                    }.forEachIndexed { index, rockLine ->
//                        debug("convert $workingRockX $index ${towerFloors.size}")
                        if (workingRockY + index <= towerFloors.size - 1) {
//                            debug("${towerFloors[workingRockY + index]}")
                            val existing = towerFloors[workingRockY + index].toMutableList()
                            towerFloors[workingRockY + index].clear()
                            towerFloors[workingRockY + index].addAll(existing.mapIndexed { index, b ->
                                b || rockLine[index]
                            })
                        } else {
                            towerFloors.add(rockLine.toMutableList())
                        }
                    }
            }

            workingRockShapeIndex++
            workingRockX = 2
            workingRockY = towerFloors.size + 3
        }

        fun tetris() {

            rockShape = rocks[(workingRockShapeIndex % rocks.size).toInt()]
            val windLeft = input[(workingWind++ % input.length).toInt()] == '<'
//            debug("is wind left? $windLeft")
            if (windLeft && canGoLeft()) workingRockX--
//            if (windLeft && canGoLeft().also { debug("canGoLeft? $it") }) workingRockX--
            if (!windLeft && canGoRight()) workingRockX++
//            debug("workingRockX $workingRockX y $workingRockY")
            if (canDrop()) {
                workingRockY--
            } else {
                convertToRest()
            }
        }

        fun debug(step: Int) {
            debug("")
            debug("===Step $step===")


//            ((workingRockY+rock.size).downTo(0)).forEach {y ->
//                if (y >= workingRockY && y <= workingRockY + rock.size) {
////                    rock[y-workingRockY]
//                }
//            }

            rockShape
                .map {
                    val start = (0.until(workingRockX)).map { false }.plus(it)
                    start.plus(start.size.until(7).map { false })
                }.withIndex().forEach { (index, booleans) ->
                    booleans.map {
                        if (it) '@' else ' '
                    }.also { debug("$it ${index + workingRockY}") }
                }

            debug("floors: ${towerFloors.size}")
            towerFloors.withIndex().reversed().forEach { (index, booleans) ->
                booleans.map {
                    if (it) '#' else ' '
                }.also { debug("$it $index") }
            }
        }

        var step = 1
        while (workingRockShapeIndex < rocksToTest) {
//        repeat(55) {
//            println(workingRockShapeIndex / rocksToTest.toDouble() * 100f)
            if (workingRockShapeIndex % 100_000L == 0L) println(workingRockShapeIndex / rocksToTest.toDouble() * 100.0)
            tetris()

//            debug(step++)
        }
//        }

        return "${towerFloors.size}"
    }

    fun part2(): String {

        return "result"
    }
}


private val rocks = """
####

.#.
###
.#.

..#
..#
###

#
#
#
#

##
##
""".trimIndent()
private val testInput =
    """
>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>
""".trimIndent()
private val input =
    """
>><>><<<<><<<<><<<>><>>><>>>><>>>><>><<>>><<<>>><<>><>>><<>>>><<<<>>><<<>>>><<>>>><<<<>>><<<>><<<<><>><<>><<>><<>>><<<>><<<>>>><<>>>><<<<>>><<<>><>><<<>><<<<>>>><>>>><<>>><<>>><<>>><<><>>>><<<<><<<<>>><>>><<<<>>>><>>>><><<>><<>><<<<><<<<>>><<<<>>><<>>><<<><<<>><<<>><><<>>>><<<<><<<>><<<<>>><>>><<>><<>>><>>>><<<<>>>><<<<>>><<<<>>>><<<<>>>><>><<<<><<<<>><<>>><<>>>><<<>>>><<>>><<<<><<<><>><>><<<<>>><<<>><<<>><<<<>><<>>><<>><<>>><<<<>>>><>><<<<>>>><<<<>>><>>><<<<>>><<>>>><<>>><<><>>><>><<<<><<<<><<<>>><<<<>>><<<<>>>><>>>><<<>>>><>>>><<<<>><>><<<<><>><<<>>><<<<>><<<<>>>><<<>>><<<<>>>><<<><<><<<><<><<<<>><<>>>><<>>>><<<<>><>>><<<<>>>><<<><<<<>>>><<<<>>><<>>>><<>>>><<<><<>><<<>>><<<<>>><><>>>><>><<<<>>>><<<<>>>><>><<><<>>><>><>><<<>>>><<<>>>><<>>><<<<>>><<>><>>>><<<<>>><<<<>><>><><>><>><><<>><<>>>><<<>>>><<<>>><<<><<<><<<<><<<>><>><<>>><<<>><<><<<<>><<<<>><<<>>>><<>><<<><><<><<>>><<<<>>>><<><>><<<<><<>>>><<<><<>><<>>><<<>><<>><<>><<<<>>><<<>><<>><<<>><<<>>><<<>>><<<><<<<>><>>><<>><<<>>>><<>><<>><>><<<<><<>>><>><<>>>><<<>>>><<<><<>>><<<<><<<<>><><<<>>><<>>>><<<>><<<<>><>><<<><<<>>>><<<<>>><>>>><<>>>><<<><<<>><<<<>>><<<>>>><<<>><<<><<><<<>>>><>><<<>><<>><<<<>>>><<<<>>><<<>>><<>>><<<>>>><<>><<<<>>><<<>>><<>><><<>>><<<>>>><<<<>>>><<<<>>>><<<>>><<<<>>>><>><<>>>><>>>><<>>>><<>>>><<<><<<>><<<>>><<>>>><<<>><<>>><<>>><<<<>>><><><<><>>>><<<>>><><<<<>><<<>><<<<>>>><<<<>>><<>><<<>>><>>><<<<>>>><>><<<><<<<>>>><<>>><>>><<>><<>>>><<<<><<><>>>><<<<>><>>>><>>>><><<<>>>><<>><<>>><<>><<>><>>>><<>><<>><<<<>>><<<<>>>><<<<>>><<><<<>>>><<><<><<<<>><<<><<><<<<>>>><>>><>>><<<<>>>><<<>>>><>><<>>>><<>>>><<<>>>><<<><<<><<<<>>>><<>><<><<<>>>><><<><<<>>><>>>><>><>>>><<<<>><<<<>><<<<>>>><><<<<><<><<<>><><<<>>>><><><>>><<<<>>><<<>>>><>><<<>>><<<>><>><<>><<<<>>>><<<>>><<<>>><<<<>>>><>>><<>><<<<>>>><<<>>><>>>><<<><<><<>><<<>><>>>><<<<><<<><<<<>><<<><<<<>>><<<<>>>><<<>>><>><<<>>>><<<<>>><>><<<>>><<<<>>><<<<><<<<>>><<>>>><<>>>><>>><<<>><<<<>>><<<<><<>><>>><<>>>><<<<><>>>><<<>>><><<<>>>><><>>>><>><<<>>><<<>>>><<<<>>><<<<>>><<<<>><<<><<<<><<<>>><>>><<<>><<<<>><<<>><<<><<<<><<><<<<>>><<>><<>>><><<><>>>><<>>><<<<><<>>><>>>><<<>>><<>>>><><<<>>><<><<<<>><><<><<<>>><<<>>>><<>>>><<>>>><<>>><<<<>>><<<>>><<<><<<>>><>><<<>><<>>>><<>>>><<<>>><<<<>><<<<>>>><<<<>>><<>>><<<<><>>>><>>><<>><<<<>>>><<<<><<>>>><<<>>><<<>><<>>><>><<<>>><<<<><<<<>>><>><<<>><<<<>>><<<><<<><<<>>><>><<>>>><>>><<<<>>><<<>>><>>>><<><><<<<><>>>><><>>>><<<<>><<<<>><>>><<>><<<><<>>>><<<>><<<>><<<>>><<<<>><<<>>>><>><<>>><<<<>>>><<>>>><<<>>><<<<>>>><<<>><><<<<>>>><>>>><<>>><<<<>>><<<>>>><<><<<>>><<>>>><<<<>><<<><<>>><<<>>><<<<><<>>>><><<<<>><<<>>>><<<<>><<<<>>><<<>><<<><>><<<>><<<<>>><<>><<>>><<><<<<>><>>>><<<>>>><<>>>><<>>><<>><<<<>><<<>>>><<>>><<<>>><<<<>><>>>><>>>><<<<>>>><<>><<>>><<<<>>>><>><>>><>><<>><<<<>>><<<>>>><<<<>><<<<><<>><<<<>><<<<>><<<<>>><<<>>>><<<>>><<<>><<<<>>>><<<<>>>><<<<><>><>>>><><<<><>><<<<><<<<>><<<>>>><<>>><<<<>>>><<<<><>>><<>>>><<<>>><<<>>>><<><<<<>><<<>>><>>><<><<<<>>><<<<>><<<<><<>>>><>>><<<>>><<<<><<>><<<><>>>><<>>><<<>>><<<><<>>>><<<>><<<><>><<>><<>><<<>>><<<>>>><<>>>><<<<><<>>>><<<<>><>><<>><<<<>><<>>><<>><<<><<<>>><<>>><<<<>>><<<<>><<<<>><<<<>>>><<<>><<<<>><><<>>>><<<<>>><<<>>><<>><<>>>><<<>>><<>><<<<>><<<>>>><<<<>>>><<><<<<>>><><<>>><<<<>>>><<<>>>><<>><><><<<<><<<><<<>>>><>>>><<<<>><<>>>><<<>>>><<>>><><<>>>><<<<>>><<<>>><<>>>><<<>>><<<>><<<>>>><>>><<<<>>>><<<<>>><<>><<><<<>><<>>>><<<>>><><>>><<>>>><<<>><<>>><<<<>>>><<<<>>>><<>>>><<>><><<>>>><<><<>><<<><<<>>>><<<<><<><<<<>><<<>><<<<><<>>>><<><<<>>>><<<>><>><<><<>>><>><<<<>>><<<>>><<>>><<<>><<>>>><<<>>>><<<<>><><<<>>><><<<<>>>><<<<><>>><>>><<<<>><<<>>>><<>>><<<<>>><<<>><<<><<>><<<>>>><<>>><<<>><>>><<<<>>><<>>>><<<<>>><<>>>><<<><<<<><><<<>><<><<>>><><<<>><<<><><<<><<>>>><<<<><>>><<<>>>><<<<>>><<>>><<><<<<>><<<>>><<<<>><><<>>>><>>>><>>>><<<<>>>><<<>><<<>><<<<>>><<<<><>>><<<<><>>>><><<<>><<<<><<>>>><<<<>>>><<>><<>>><><>>>><>><>>><<>>>><<<>>><<<<><<<>><<<<>>><<>>>><<<<>>><<<<>>>><<>>>><>><<><>>>><<<<>>><<<<><>>>><<<<>><<>>><<<<>><<<>><>>><<><<><<<<>><<><<<<>>>><>>>><<>>><>>><<<<>>>><<<>>><<<<><<<<>>><<>>><<>>>><<<><<<>>>><<<>>><<<><<<<><<>>>><<<>>>><<<<>>><>><<<<>><<><<>>><<><<<>>>><<<<>><<<>>><<><<<>>>><<><<<<><<<<>><<><>><<>>>><>><<<><>>>><<<<>><<<<>><<>>><<<>><<>>>><<<><<>><<<>>>><<<<>>>><><<><>>>><<<>>>><><<<<><<<<>>>><<>>>><<<<>><<<<>><<<<>>><<<><>><<>>>><<><<>>>><<<>><<>><<<<>>>><<<><<<>>>><<<>><<>>><<>>><><<>>>><><>><<<>>>><<<><>><<<<>>>><<><>>>><>>><<<<><<<<>><<>>>><<<><<>>><<>><<<>>>><<><<>>>><<<<>>><>>>><<><<<>>><><<<>>><<<>>><<<>><<<><<>>><<<>>>><<<<>><>>>><<>>>><<<>>>><>><<>>>><<>><<<>>><<>>><<><<>>>><<>><<>>><>>><<<<>>>><>>><<<<>><<<<><>>><>>>><<<>><<<<>>>><<<><>><><<<>>><<<>>>><>>><<>>><<<<>><<<>>>><<<>>>><<<<>><<<<>>><>>>><><><><<<<>>>><<<<><<<<><<<<>>>><<<>>>><<>><<<<><>><<>>><<<><><>><<<>>><<<<>>>><><<<<>>>><><<>>><<>><<>>><>><>><<<>><<>>>><>><<><<<>>>><<<>>><<<<>><<<<>>><<<<>>><<<<>>>><><<>><>>><<<<>>>><><<>>>><<<<>>><<>>><>>>><<>>><><<><<>>>><<<<><<<<><<>>>><<>>>><>>>><<<><>>><<<>>>><<<><<>>><<>><<<><<<<>>><<<>><<>>><>>>><>><<>>><><<<><>>>><<>>><<<><>><<<>><<<<>>>><<<<>><>>><<>>><>><<><<><<<<>><<<><<<>>><>>>><<<<>>><<>>>><<<>>><<>><<>><<<>>>><>><>><>>><<<<>>><<<>>>><<<<>>><<<>>>><>><<>>><<>><<>>>><<<>><<>>>><<<<><<<<><<<<>>><<<>><<<>><<<<>>><<<><<<<>><<>><<>>><<<>>><<>>><<<<><<<<>>><<>>>><<<>>><<>><<<<>><<<<>>>><<<<><<<>>>><<<<>>>><><>>><<>><<<>><<>>>><<>>>><<<>><<>>><<<<>>>><<<<>>>><<>>><<<<>>><<<<><<>>>><<<>>>><<<>><<<>><<>><<<<><<<<>>>><<<>>><<><>>><<><<>>>><<<>>>><<<<><<<<>>><<<<><<<>>>><<>>>><<>>><<>>><<<>><<><<<<><<>><<<<><<<><<<><<>><<<>>>><<<><<>><<>>>><<<><<<<>>><<<>>>><><><<><<<>>><<<<>>><<<>><<<>>>><>>>><<><<>><<>><>>>><<<>><<<>>><>>>><<<<>>><<<<>>><<<>>><<<>>>><<<<>>><<>>>><<<>>>><<<>>><>>>><<><<<>><<>>>><<<<>>><>>><<>>><<<<><>><<>>>><>>><<>>><<><>>><>>><><<><><<>><<<<>>>><>><<<<>>><<>>><<>><>>>><<<>>>><<<<>><<><<<<>>>><<<<><<><><<<<>><<>>>><<<><>>>><>><><<>><<<>>><<>>>><<><<<>>><<<<>>>><<<<>><<><<<>>><<<<>>>><<<>>>><<<>>>><<><<<>>>><<<<>>>><>><>>>><<>>>><<<>><<>>><<<>>>><<>>>><<<<>><>>>><<>>>><<<>>>><<<><<<>><<<<>>><><<<<><<<<>><<<>><<<>>>><<<><<><<<>><<<<>>>><<<>>><<>>><<>>><><<>>>><>>>><<><>>><><<<<>>>><>>><>>><<>><>>>><<<<>><<>><<><<<<>><<<<>>>><<<<>>>><<<><<<<>>>><<<<>>><<><<<><<><<>>><<<<>><<<>>>><<<>>>><<<>>>><<<>><>><<<><><<>>>><<<<><<<><<<<><<>>><<<>>>><<<<><<<<>><<>>>><<>><<><<<<>>>><><<<<>><<><<<>>><>>><>><>>>><<<<>><<>>>><><<<>>><<>>>><<<>>>><<<<>>><<>><<<<>><<>>>><<<>>>><<<<><>>><<<<>><<>><<<>>><><<>>><>><<<>>>><>><<<>>>><<<<><<>>>><><<<<>>><<<<>><<<>>>><<>>>><<<<>>>><<<<>><<><<<><<<>>>><<<<><<<<>>>><><>>><<>><<<>><<>><<>>>><>>><<<<><<<<>>><<>>>><<<>>>><>>>><<<<>><>>>><>>><<<>>>><>>>><<>>>><<><<>>>><>>>><><<<<><>>><<><<<>>>><>><<>>>><<<>><<>><<>>><<<><<<<>>><<<><<><>>><<><<><<<><<<>>>><<>>><<<<>><<<><>><<>>><<<<>>><>>><<>><<<>>>><>>>><<<<>><>><>><>>><<<<>><<>><><<>>><<<>>><<<><>><<<<>><<<>><<>><<<>>>><<>><<<<>>><>>><<><<>>><>>>><<><<<<>>>><<<<>>>><<>>>><<<>><<<>><<<>>>><>>><>>>><<><<<>>><<><<>>><>><<<<><<<<>>>><<<>>><>><<>>><>><>><<><<<<>><><>>><<<><<<<>>>><<<<><<<<>>><<<<>>>><<<>>>><<>>>><<<<><>>>><>>><<<<><<>><<<<><<<<>><>><<<>>><><<<<>><>>><>>><<><><<<<>><<<<>>><<<>>><>>>><<>>><<>>><<>><>>><<<>><><<>>>><><<<>><<<>>>><<<>>><>><<>>><<<<>><<<<>>>><<<<>><<<>>><<<<>>><><>>>><<>><<>>>><<<<><<<<>>>><<>><<>><>><<<<><<>>>><<<>>><>><<<<>>>><<>><<<>>>><<>>><<<><<<>><<<<><>><><<<<>>>><<<>><<<>>><<<>>>><<<>>><<<<>>>><<<>>><>><<<><<<>><><<>>>><>><>>><<<>>>><<>>>><>>>><<>>><<<<><<<<>><<<<>><<<<>>><<<<>>><<>>><><<<>>>><><<<>>><<>>>><<<<>>>><<>><>>>><<<<>><<>>><>><>>>><<>>><<<<>>>><<>>><<>>><><<<<>><<<>>><<<<>>>><>>><<><<>><>>><<>>><<><><<<><>>><<><<<>>>><>>><<<>><<>><<><<<<>><><<<<>>>><<<>><>>><>>><<<><>>>><<<><>><<<<><<<<><<<>><<>><<>><<<<>>>><<>>><<>><<<<>>>><>>><>>><<<<>>>><>><<<<>>><<>>>><<>>>><<<>><<<><<>>><>><<<<>>>><<>><<<>>><>><<<>><>>>><>>><<<>>><>><>><<<>><<<>><<<<>><<<>><<<<><>>><<<>>><<>>><<<>><<<>><>><<<<>><<>>><<<>>><<<>><<<<><<<>>>><>><<>>>><<<><>>>><<<>>>><>>><>><<>><<>>><<<<>><<<<>>>><>>><>>>><<<<><<<>><<>>>><<<<>>><><<>>>><>><<>>>><<<><<><>>>><<<>><>>><<<>>>><<<<><<>><>>><>>>><><<<>>>><<<<><><<<>>><<<>><><<<>>><<<>><<<>><<<><>>><><<<<><<<<>>>><<<><<>><<<<><<>><<<<>>>><<<<><>>>><<<><>>>><<<<>>><<<<><<><<<><<>><<>><<<<>>>><<<>>>><<<<>>>><<<>>>><<<<>>>><<<<>>>><>>><<<<>>><<<<>><>>>><>><>><>>><<>>>><>>>><<<<>><<<<>><>><<<<><<>>><<>><>>>><<<<>>><<>><<<<>>>><<<>>><>><<<<>>><<<>>><<<<>>><<<><<<<><<<<>>>><<<>><<<>>><>>><<<<>>>><<>>>><<<><<<>>><<>>>><<<>><>>><>>>><<<<>><<<>><<>>>><>>>><<<>><<><><<<<>>>><<>>><<>>>><<>>><<>>><<>>>><>><><<<<>>><<<<>>><<<>><<<<>><>>><<>>><<><<<>>>><<>><><>><<><>>><<<>><<><<<><<<>><<<<><<<<>>>><<<><<<<>>>><<<<><>><>><<<>><<<<>>>><<>>>><<>>><>>><<<>>>><<<><<><<<>><<><<>>>><<<><<<>><<<<>>>><<>>><<<<>><<>><><>><<>>><<<<>><<><<><<>>><<>>><<<<>>><<<<>><<<<><><>>><<<<><<>>>><<<<><>>><<>><<<<>><<>><<<><<<><<<<>>>><<>>><<>><>><>>>><>>>><>><<>>>><<<<>>><>><<><<<>>>><<<>>><<<>>><<><<>><<>>><<>>><<<<><<<<>>>><><<<<><<>>>><<<<><><<>>>><>><<>>>><>>>><<<>><<<<>>>><<<<>>>><<<<>>><>><<><<>>><>>>><<<>><<<>>><<>>><>>><<<>>>><>><<<>>>><<<<><<><<>>><<<<>>><<<>>>><<>>>><>><<<><<<>><<<<><><<><<<>>><<<>>><>>><>>><<<<>><<<><>>>><<<<><><<<<>>><<<>>>><<>><<<<>>>><<<>>><<<<>>>><<>>><<>>>><<<<>><><>>><>>>><<<<>>>><<<>>><<><<>><>>>><<>>>><>>>><<>>>><<<>><<<>>><<<><<>>><<<>>>><<>>>><<>>><<<<>><>><<<<><<>><<>><<>>><<<><<>>>><>>><<<<><<<<>>>><><<>>>><<<>><<>>>><<<>>><<<<>>>><<<<>>>><><>>>><<<>><<<>>><<>><<<<>>>><>>><<><<<><<<<>>>><<>>><><<<>>>><<><><>><><<>>>><<<<>>><>>><<<<>>><<>>>><<>><<<>>>><<<>>><<<<>>><<<>><<<<><>><<<><><<><<<<><<<><<<>>><<><<<>>>><<<>>><<<<>>><<<<>>>><<<>><<<<>>><<><><<<><>>><<<>>>><>>><<<<>>><<<<>>>><<<>>>><<<>><<>><<>>>><<>>><<>><><<<>>>><<<<><>>><<<<>>><<<>><<<<>><<>>>><<>>><<<>>>><<>><<<>>>><<<<>>><><>><<<>>><<<<>>><<<<>><<<>>><>>><<>><><<<>><><>>><<>><<>><<<>>>><<>>>><><>><<<>>><>><<>><<<<>>>><<>>>><<<>><<>>><>>><<<<>><<<<>>><<>>><<>>><<<<>><<>><<><<<<>>>><<>>>><>>><<>>><<>>><<<>><<<>><<<<>><<<<><>>><<<<>><<<><><<<<>>><<>>>><>>>><<>><<<<><<<<>>><<<>>><<<<>>><<<>>><<<>><<<>><>>><<>>>><<<><<<>>>><<<<>>>><>>><<><<<><><<<>><>>><<<>>>><>><<<>>>><<<><<>>
""".trimIndent()

private val travisInput =
    """

""".trimIndent()


/**

 */